/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
 * ClaudeCodeBridge - –ö–ª–∞—Å—Ç–µ—Ä–Ω–∞—è –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
 */

import * as vscode from 'vscode';
import { WebviewProviderV2 } from './webviewProvider_v2';

export function activate(context: vscode.ExtensionContext) {
    console.log('üöÄ ClaudeCodeBridge v2 is activating...');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä WebView —Å –Ω–æ–≤–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
    const provider = new WebviewProviderV2(context.extensionUri);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º WebView –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    context.subscriptions.push(
        vscode.window.registerWebviewViewProvider(
            WebviewProviderV2.viewType,
            provider
        )
    );
    
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Claude
    context.subscriptions.push(
        vscode.commands.registerCommand('claudeBridge.start', async () => {
            try {
                await provider.startClaude();
            } catch (error) {
                vscode.window.showErrorMessage(`Failed to start Claude: ${error}`);
            }
        })
    );

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Claude
    context.subscriptions.push(
        vscode.commands.registerCommand('claudeBridge.stop', async () => {
            try {
                await provider.stopClaude();
            } catch (error) {
                vscode.window.showErrorMessage(`Failed to stop Claude: ${error}`);
            }
        })
    );

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏
    context.subscriptions.push(
        vscode.commands.registerCommand('claudeBridge.openPanel', () => {
            vscode.commands.executeCommand('claudeBridge.chatView.focus');
        })
    );

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    context.subscriptions.push(
        vscode.commands.registerCommand('claudeBridge.diagnose', async () => {
            // –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ Command Palette
            vscode.window.showInformationMessage(
                'Diagnostics available in Claude Bridge panel. Click "Diagnostics" button.'
            );
        })
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é VS Code –¥–ª—è Shell Integration
    const vsCodeVersion = vscode.version;
    const majorVersion = parseInt(vsCodeVersion.split('.')[0]);
    const minorVersion = parseInt(vsCodeVersion.split('.')[1]);
    
    if (majorVersion < 1 || (majorVersion === 1 && minorVersion < 88)) {
        vscode.window.showWarningMessage(
            'Claude Code Bridge: For best experience, upgrade to VS Code 1.88+ for Shell Integration support. ' +
            'Current version will use fallback mode.',
            'Learn More'
        ).then(selection => {
            if (selection === 'Learn More') {
                vscode.env.openExternal(vscode.Uri.parse(
                    'https://code.visualstudio.com/docs/terminal/shell-integration'
                ));
            }
        });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    vscode.window.showInformationMessage(
        'ü§ñ Claude Code Bridge v2 activated! Open the Claude Bridge panel to get started.',
        'Open Panel'
    ).then(selection => {
        if (selection === 'Open Panel') {
            vscode.commands.executeCommand('claudeBridge.openPanel');
        }
    });

    console.log('‚úÖ ClaudeCodeBridge v2 activated successfully!');
}

export function deactivate() {
    console.log('üîÑ ClaudeCodeBridge v2 is deactivating...');
    // Cleanup –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ subscriptions
    console.log('‚úÖ ClaudeCodeBridge v2 deactivated');
}